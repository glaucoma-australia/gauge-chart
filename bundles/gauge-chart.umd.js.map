{"version":3,"file":"gauge-chart.umd.js.map","sources":["ng://gauge-chart/lib/shared/gauge-segment.ts","ng://gauge-chart/lib/shared/gauge-label.ts","ng://gauge-chart/lib/gauge-chart.component.ts","ng://gauge-chart/lib/gauge-chart.module.ts"],"sourcesContent":["/**\n * @category   Model\n * @package    com.kiwity.gauge.gauge\n * @author     Salvador Subarroca (subarroca@gmail.com)\n**/\n\n\n\n\n// ANGULAR\n\n\n\n\n// EXTERNAL\n\n\n\n\n// OWN\n\n\n\n\n\nexport class GaugeSegment {\n  radius: number;\n  goal: number;\n  value: number;\n  color: string;\n  bgColor: string;\n  borderWidth: number;\n\n\n  constructor(options: {\n    radius?: number,\n    goal?: number,\n    value?: number,\n    color?: string,\n    bgColor?: string,\n    borderWidth?: number\n  } = {}) {\n    this.radius = options.radius || 100;\n    this.goal = options.goal || 100;\n    this.value = options.value;\n    this.color = options.color;\n    this.bgColor = options.bgColor || 'transparent';\n    this.borderWidth = options.borderWidth || 100;\n  }\n\n\n\n  get computedRadius() {\n    return this.radius - this.borderWidth / 2;\n  }\n\n  get strokeProgress(this: GaugeSegment) {\n    return `${2 * Math.PI * this.computedRadius * this.value / this.goal} ${2 * Math.PI * this.computedRadius}`;\n  }\n\n  get strokeEmptyProgress(this: GaugeSegment) {\n    return `0 ${2 * Math.PI * this.computedRadius}`;\n  }\n}\n","/**\n * @category   Model\n * @package    com.kiwity.gauge.gauge\n * @author     Salvador Subarroca (subarroca@gmail.com)\n**/\n\n\n\n\n// ANGULAR\n\n\n\n\n// EXTERNAL\n\n\n\n\n// OWN\n\n\n\n\n\nexport class GaugeLabel {\n  color: string;\n  text: string;\n  x: number;\n  y: number;\n  fontSize: string;\n\n\n  constructor(options: {\n    color?: string,\n    text?: string,\n    x?: number,\n    y?: number,\n    fontSize?: string\n  } = {}) {\n    this.color = options.color;\n    this.text = options.text;\n    this.x = options.x || 0;\n    this.y = options.y || 0;\n    this.fontSize = options.fontSize || '1em';\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\n\nimport { GaugeLabel } from './shared/gauge-label';\nimport { GaugeSegment } from './shared/gauge-segment';\n\n@Component({\n  selector: 'ng-gauge-chart',\n  template: `<svg viewBox=\"0 0 200 200\">\n  <g\n    class=kw-holder\n    [attr.transform]=\"isIE11 ? 'translate(100 100) rotate(-90)' : ''\">\n    <circle\n      class=kw-back\n      [attr.r]=\"bgRadius\"\n      [style.fill]=bgColor/>\n\n      <g\n        *ngFor=\"let segment of sortedSegments\">\n        <circle\n          class=kw-mid\n          [style.stroke]=segment.bgColor\n          [style.strokeWidth]=segment.borderWidth\n          [attr.r]=segment.computedRadius/>\n\n          <circle\n            class=kw-front\n\n            [style.transition]=\"'stroke-dasharray ' + animationSecs + 's'\"\n            [style.stroke]=segment.color\n            [style.strokeWidth]=segment.borderWidth\n            [style.strokeDasharray]=\"segmentsLoaded ? segment.strokeProgress : segment.strokeEmptyProgress\"\n            [style.strokeLinecap]=\"rounded ? 'round' : ''\"\n            [attr.r]=segment.computedRadius/>\n      </g>\n  </g>\n\n  <g\n    transform=\"translate(100, 100)\">\n    <text\n      class=kw-label\n      *ngFor=\"let label of labels\"\n      [attr.x]=label.x\n      [attr.y]=label.y\n      [style.fill]=label.color\n      [style.fontSize]=label.fontSize\n      text-anchor=middle>\n      {{label.text}}\n    </text>\n  </g>\n</svg>\n`,\n  styles: [`.kw-front,.kw-mid{fill:transparent}.kw-holder{-webkit-transform:translate(100px,100px) rotate(-90deg);transform:translate(100px,100px) rotate(-90deg)}`]\n})\nexport class GaugeChartComponent implements OnInit {\n  @Input() bgRadius = 100;\n  @Input() bgColor: string;\n  @Input() rounded = true;\n  @Input() reverse = false;\n  @Input() animationSecs = 0.5;\n\n  @Input() labels: GaugeLabel[];\n\n  @Input()\n  set segments(segments: GaugeSegment[]) {\n    this.segmentsLoaded = false;\n    this.sortedSegments = this.sortSegments(segments);\n\n    // wait a bit and start animation\n    setTimeout(\n      () => this.segmentsLoaded = true,\n      0);\n  }\n\n  sortedSegments: GaugeSegment[];\n  segmentsLoaded = false;\n\n  isIE11 = /Trident.*rv[ :]*11\\./.test(navigator.userAgent);\n\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  sortSegments(segments: GaugeSegment[]) {\n    return segments && segments.sort((a: GaugeSegment, b: GaugeSegment) => {\n      if (this.reverse)\n        return (a.value / a.goal > b.value / b.goal) ? 1 : -1;\n      return (a.value / a.goal > b.value / b.goal) ? -1 : 1;\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GaugeChartComponent } from './gauge-chart.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [GaugeChartComponent],\n  exports: [GaugeChartComponent]\n})\nexport class GaugeChartModule { }\n"],"names":["Component","Input","NgModule","CommonModule"],"mappings":";;;;;;;;;;;;;;;;;;AAyBA;;;;IAAA;QASE,sBAAY,OAON;YAPM,wBAAA;gBAAA,YAON;;YACJ,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,GAAG,CAAC;YACpC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,GAAG,CAAC;YAChC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;YAC3B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;YAC3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,aAAa,CAAC;YAChD,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,GAAG,CAAC;SAC/C;QAID,sBAAI,wCAAc;;;gBAAlB;gBACE,OAAO,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;aAC3C;;;WAAA;QAED,sBAAI,wCAAc;;;;gBAAlB;gBACE,OAAU,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,SAAI,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,cAAgB,CAAC;aAC7G;;;WAAA;QAED,sBAAI,6CAAmB;;;;gBAAvB;gBACE,OAAO,OAAK,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,cAAgB,CAAC;aACjD;;;WAAA;2BA9DH;QA+DC;;;;;;;;;;;;;;ACtCD;;;;IAAA;QAQE,oBAAY,OAMN;YANM,wBAAA;gBAAA,YAMN;;YACJ,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;YAC3B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YACzB,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACxB,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACxB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,KAAK,CAAC;SAC3C;yBA7CH;QA8CC;;;;;;AC9CD;QA+EE;4BAzBoB,GAAG;2BAEJ,IAAI;2BACJ,KAAK;iCACC,GAAG;kCAgBX,KAAK;0BAEb,sBAAsB,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;SAGxC;QAjBjB,sBACI,yCAAQ;;;;gBADZ,UACa,QAAwB;gBADrC,iBASC;gBAPC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;gBAC5B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;;gBAGlD,UAAU,CACR,cAAM,OAAA,KAAI,CAAC,cAAc,GAAG,IAAI,GAAA,EAChC,CAAC,CAAC,CAAC;aACN;;;WAAA;;;;QAUD,sCAAQ;;;YAAR;aACC;;;;;QAED,0CAAY;;;;YAAZ,UAAa,QAAwB;gBAArC,iBAMC;gBALC,OAAO,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAC,CAAe,EAAE,CAAe;oBAChE,IAAI,KAAI,CAAC,OAAO;wBACd,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;oBACxD,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;iBACvD,CAAC,CAAC;aACJ;;oBArFFA,cAAS,SAAC;wBACT,QAAQ,EAAE,gBAAgB;wBAC1B,QAAQ,EAAE,iuCA2CX;wBACC,MAAM,EAAE,CAAC,wJAAwJ,CAAC;qBACnK;;;;;+BAEEC,UAAK;8BACLA,UAAK;8BACLA,UAAK;8BACLA,UAAK;oCACLA,UAAK;6BAELA,UAAK;+BAELA,UAAK;;kCA9DR;;;;;;;ACAA;;;;oBAICC,aAAQ,SAAC;wBACR,OAAO,EAAE;4BACPC,mBAAY;yBACb;wBACD,YAAY,EAAE,CAAC,mBAAmB,CAAC;wBACnC,OAAO,EAAE,CAAC,mBAAmB,CAAC;qBAC/B;;+BAVD;;;;;;;;;;;;;;;;;;;;;;;;;;"}
